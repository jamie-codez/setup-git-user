---
name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "Validating version: $VERSION"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format. Expected: v1.0.0"
            exit 1
          fi
          
          echo "‚úÖ Version format valid: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Run tests before release
        uses: ./
        with:
          username: 'Release Test User'
          email: 'release.test@example.com'

      - name: Verify functionality
        run: |
          echo "Verifying release functionality..."
          # Test basic git operations
          echo "Release test file" > release-test.txt
          git add release-test.txt
          git commit -m "Release test commit"
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [ "$AUTHOR" != "Release Test User" ]; then
            echo "‚ùå Release test failed"
            exit 1
          fi
          
          echo "‚úÖ Release validation passed"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract changelog section for this version
          VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
          # Get changelog content between version headers
          CHANGELOG_CONTENT=$(awk "/## \[$VERSION_NUMBER\]/,/## \[/{if(/## \[/ && !/## \[$VERSION_NUMBER\]/) exit; if(!/## \[$VERSION_NUMBER\]/) print}" CHANGELOG.md || echo "No changelog entry found")
          # Save to file for multiline content
          echo "$CHANGELOG_CONTENT" > changelog_excerpt.txt

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: changelog_excerpt.txt
          draft: false
          prerelease: false

      - name: Update major version tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          echo "Updating major version tag: $MAJOR_VERSION"
          # Delete existing major version tag
          git tag -d $MAJOR_VERSION 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true
          # Create new major version tag
          git tag $MAJOR_VERSION
          git push origin $MAJOR_VERSION
          echo "‚úÖ Updated major version tag: $MAJOR_VERSION"

  test-release:
    name: Test Released Action
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Test released action
        uses: jamie-codez/setup-git-user@v1
        with:
          username: 'Release Test'
          email: 'release@example.com'

      - name: Verify released action
        run: |
          echo "Testing released action..."
          USER_NAME=$(git config --global user.name)
          if [ "$USER_NAME" != "Release Test" ]; then
            echo "‚ùå Released action test failed"
            exit 1
          fi
          echo "‚úÖ Released action test passed"

  notify-marketplace:
    name: Notify Marketplace
    runs-on: ubuntu-latest
    needs: [ create-release,test-release ]
    
    steps:
      - name: Marketplace notification
        run: |
          echo "üéâ New release published to GitHub Marketplace!"
          echo "Version: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          echo "The action is now available for use:"
          echo "- uses: ${{ github.repository }}@${{ github.ref_name }}"
          echo ""
          echo "Documentation: https://github.com/${{ github.repository }}"

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest version
        run: |
          VERSION="${{ github.ref_name }}"
          
          # Update README.md to reference the latest version